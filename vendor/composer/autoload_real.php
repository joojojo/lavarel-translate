<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit33f5db2605458202d15deaf1ac7829c8
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) { // 检查自动加载器是否已经被实例化, 如果已经被实例化则直接返回
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

        // spl_autoload_register — 注册给定的函数作为 __autoload 的实现
        // 将函数注册到SPL __autoload函数队列中。如果该队列中的函数尚未激活，则激活它们。
        // 如果在你的程序中已经实现了__autoload()函数，它必须显式注册到__autoload()队列中。因为 spl_autoload_register()函数会将Zend Engine中的__autoload()函数取代为spl_autoload()或spl_autoload_call()。
        // 如果需要多条 autoload 函数，spl_autoload_register() 满足了此类需求。 它实际上创建了 autoload 函数的队列，按定义时的顺序逐个执行。相比之下， __autoload() 只可以定义一次。
        // throw 此参数设置了 autoload_function 无法成功注册时， spl_autoload_register()是否抛出异常。
        // prepend 如果是 true，spl_autoload_register() 会添加函数到队列之首，而不是队列尾部。
        spl_autoload_register(array('ComposerAutoloaderInit33f5db2605458202d15deaf1ac7829c8', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit33f5db2605458202d15deaf1ac7829c8', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require __DIR__ . '/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit33f5db2605458202d15deaf1ac7829c8::getInitializer($loader));
        } else {
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit33f5db2605458202d15deaf1ac7829c8::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire33f5db2605458202d15deaf1ac7829c8($fileIdentifier, $file);
        }

        return $loader;
    }
}

function composerRequire33f5db2605458202d15deaf1ac7829c8($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
